{"ast":null,"code":"// src/hooks/useUser.ts\nimport{useQuery,useMutation,useQueryClient}from'react-query';import{UserService}from'../services/UserService';import{AxiosHttpClient}from'../api/AxiosHttpClient';const userService=new UserService(new AxiosHttpClient('https://api.example.com'));export const useUser=userId=>{return useQuery(['user',userId],()=>userService.getUser(userId));};export const useUpdateUser=()=>{const queryClient=useQueryClient();return useMutation(data=>userService.updateUser(data.id,data),{onSuccess:data=>{queryClient.invalidateQueries(['user',data.id]);// Invalidate the query to refetch\n},onMutate:updatedUser=>{// Optimistic update\nqueryClient.setQueryData(['user',updatedUser.id],updatedUser);},onError:(error,updatedUser,context)=>{// Rollback on error\nqueryClient.invalidateQueries(['user',updatedUser.id]);}});};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","UserService","AxiosHttpClient","userService","useUser","userId","getUser","useUpdateUser","queryClient","data","updateUser","id","onSuccess","invalidateQueries","onMutate","updatedUser","setQueryData","onError","error","context"],"sources":["/Users/cei37/layered-architecture-2/src/hooks/useUser.ts"],"sourcesContent":["// src/hooks/useUser.ts\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { UserService } from '../services/UserService';\nimport { UserEntity } from '../models/UserEntity';\nimport { AxiosHttpClient } from '../api/AxiosHttpClient';\n\nconst userService = new UserService(new AxiosHttpClient('https://api.example.com'));\n\nexport const useUser = (userId: number) => {\n  return useQuery<UserEntity, Error>(['user', userId], () => userService.getUser(userId));\n};\n\nexport const useUpdateUser = () => {\n  const queryClient = useQueryClient();\n  return useMutation((data: UserEntity) => userService.updateUser(data.id, data), {\n    onSuccess: (data) => {\n      queryClient.invalidateQueries(['user', data.id]); // Invalidate the query to refetch\n    },\n    onMutate: (updatedUser) => {\n      // Optimistic update\n      queryClient.setQueryData(['user', updatedUser.id], updatedUser);\n    },\n    onError: (error, updatedUser, context) => {\n      // Rollback on error\n      queryClient.invalidateQueries(['user', updatedUser.id]);\n    },\n  });\n};\n"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,WAAW,CAAEC,cAAc,KAAQ,aAAa,CACnE,OAASC,WAAW,KAAQ,yBAAyB,CAErD,OAASC,eAAe,KAAQ,wBAAwB,CAExD,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAF,WAAW,CAAC,GAAI,CAAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC,CAEnF,MAAO,MAAM,CAAAE,OAAO,CAAIC,MAAc,EAAK,CACzC,MAAO,CAAAP,QAAQ,CAAoB,CAAC,MAAM,CAAEO,MAAM,CAAC,CAAE,IAAMF,WAAW,CAACG,OAAO,CAACD,MAAM,CAAC,CAAC,CACzF,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,WAAW,CAAGR,cAAc,CAAC,CAAC,CACpC,MAAO,CAAAD,WAAW,CAAEU,IAAgB,EAAKN,WAAW,CAACO,UAAU,CAACD,IAAI,CAACE,EAAE,CAAEF,IAAI,CAAC,CAAE,CAC9EG,SAAS,CAAGH,IAAI,EAAK,CACnBD,WAAW,CAACK,iBAAiB,CAAC,CAAC,MAAM,CAAEJ,IAAI,CAACE,EAAE,CAAC,CAAC,CAAE;AACpD,CAAC,CACDG,QAAQ,CAAGC,WAAW,EAAK,CACzB;AACAP,WAAW,CAACQ,YAAY,CAAC,CAAC,MAAM,CAAED,WAAW,CAACJ,EAAE,CAAC,CAAEI,WAAW,CAAC,CACjE,CAAC,CACDE,OAAO,CAAEA,CAACC,KAAK,CAAEH,WAAW,CAAEI,OAAO,GAAK,CACxC;AACAX,WAAW,CAACK,iBAAiB,CAAC,CAAC,MAAM,CAAEE,WAAW,CAACJ,EAAE,CAAC,CAAC,CACzD,CACF,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}