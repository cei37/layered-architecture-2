{"ast":null,"code":"var _s = $RefreshSig$();\n// useUser.ts\nimport { useQuery } from 'react-query';\nimport { getUser } from './service';\n// Hook for fetching a single user\nexport const useUser = userId => {\n  _s();\n  const {\n    data,\n    error,\n    isLoading\n  } = useQuery(['user', userId], () => getUser(userId), {\n    staleTime: 60000,\n    onError: error => {\n      console.error('Failed to fetch user:', error);\n    }\n  });\n  return {\n    entity: data,\n    error,\n    isLoading\n  };\n};\n_s(useUser, \"vamb9feK/asxjJLX6wcKCD8DQJA=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","getUser","useUser","userId","_s","data","error","isLoading","staleTime","onError","console","entity"],"sources":["/Users/cei37/layered-architecture/src/useUser.ts"],"sourcesContent":["// useUser.ts\nimport { useQuery, UseQueryResult } from 'react-query';\nimport { getUser } from './service';\nimport { UserEntity } from './userEntity';\n\n// Hook for fetching a single user\nexport const useUser = (userId: number): UseQueryResult<{ entity: UserEntity, error: Error, isLoading: boolean }> => {\n  const { data, error, isLoading } = useQuery(['user', userId], () => getUser(userId), {\n    staleTime: 60000,\n    onError: (error: Error) => {\n      console.error('Failed to fetch user:', error);\n    },\n  });\n\n  return { entity: data, error, isLoading };\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAwB,aAAa;AACtD,SAASC,OAAO,QAAQ,WAAW;AAGnC;AACA,OAAO,MAAMC,OAAO,GAAIC,MAAc,IAA+E;EAAAC,EAAA;EACnH,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,MAAM,EAAEG,MAAM,CAAC,EAAE,MAAMF,OAAO,CAACE,MAAM,CAAC,EAAE;IACnFK,SAAS,EAAE,KAAK;IAChBC,OAAO,EAAGH,KAAY,IAAK;MACzBI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC,CAAC;EAEF,OAAO;IAAEK,MAAM,EAAEN,IAAI;IAAEC,KAAK;IAAEC;EAAU,CAAC;AAC3C,CAAC;AAACH,EAAA,CATWF,OAAO;EAAA,QACiBF,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}