{"ast":null,"code":"// userEntity.ts\n\n// Entity for a single user\nexport class UserEntity {\n  constructor(id, fullName, email, isAdmin, age) {\n    this.id = id;\n    this.fullName = fullName;\n    this.email = email;\n    this.isAdmin = isAdmin;\n    this.age = age;\n  }\n\n  // Example business logic method\n  isSuperAdmin() {\n    return this.isAdmin && this.email.includes('@admin.com');\n  }\n}\n\n// Utility function to map DTO to Entity for a single user\nexport const mapUserDTOToEntity = userDTO => {\n  return new UserEntity(userDTO.id, `${userDTO.firstName} ${userDTO.lastName}`, userDTO.email, userDTO.roles.includes('admin'), userDTO.age);\n};\n\n// Utility function to map DTO to Entity for a list of users\nexport const mapUsersDTOToEntity = usersDTO => {\n  return usersDTO.map(userDTO => mapUserDTOToEntity(userDTO));\n};","map":{"version":3,"names":["UserEntity","constructor","id","fullName","email","isAdmin","age","isSuperAdmin","includes","mapUserDTOToEntity","userDTO","firstName","lastName","roles","mapUsersDTOToEntity","usersDTO","map"],"sources":["/Users/cei37/layered-architecture/src/userEntity.ts"],"sourcesContent":["// userEntity.ts\n\nimport { UserDTO } from \"./apiClient\";\n\n// Entity for a single user\nexport class UserEntity {\n    constructor(\n      public id: number,\n      public fullName: string,\n      public email: string,\n      public isAdmin: boolean,\n      public age: number\n    ) {}\n  \n    // Example business logic method\n    isSuperAdmin(): boolean {\n      return this.isAdmin && this.email.includes('@admin.com');\n    }\n  }\n  \n  // Utility function to map DTO to Entity for a single user\n  export const mapUserDTOToEntity = (userDTO: UserDTO): UserEntity => {\n    return new UserEntity(\n      userDTO.id,\n      `${userDTO.firstName} ${userDTO.lastName}`,\n      userDTO.email,\n      userDTO.roles.includes('admin'),\n      userDTO.age,\n    );\n  };\n  \n  // Utility function to map DTO to Entity for a list of users\n  export const mapUsersDTOToEntity = (usersDTO: UserDTO[]): UserEntity[] => {\n    return usersDTO.map(userDTO => mapUserDTOToEntity(userDTO));\n  };\n  "],"mappings":"AAAA;;AAIA;AACA,OAAO,MAAMA,UAAU,CAAC;EACpBC,WAAWA,CACFC,EAAU,EACVC,QAAgB,EAChBC,KAAa,EACbC,OAAgB,EAChBC,GAAW,EAClB;IAAA,KALOJ,EAAU,GAAVA,EAAU;IAAA,KACVC,QAAgB,GAAhBA,QAAgB;IAAA,KAChBC,KAAa,GAAbA,KAAa;IAAA,KACbC,OAAgB,GAAhBA,OAAgB;IAAA,KAChBC,GAAW,GAAXA,GAAW;EACjB;;EAEH;EACAC,YAAYA,CAAA,EAAY;IACtB,OAAO,IAAI,CAACF,OAAO,IAAI,IAAI,CAACD,KAAK,CAACI,QAAQ,CAAC,YAAY,CAAC;EAC1D;AACF;;AAEA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,OAAgB,IAAiB;EAClE,OAAO,IAAIV,UAAU,CACnBU,OAAO,CAACR,EAAE,EACV,GAAGQ,OAAO,CAACC,SAAS,IAAID,OAAO,CAACE,QAAQ,EAAE,EAC1CF,OAAO,CAACN,KAAK,EACbM,OAAO,CAACG,KAAK,CAACL,QAAQ,CAAC,OAAO,CAAC,EAC/BE,OAAO,CAACJ,GACV,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMQ,mBAAmB,GAAIC,QAAmB,IAAmB;EACxE,OAAOA,QAAQ,CAACC,GAAG,CAACN,OAAO,IAAID,kBAAkB,CAACC,OAAO,CAAC,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}